
import React from 'react';
import { PaymentMethod } from '@/types';
import { 
  CreditCardIcon, 
  BanknoteIcon, 
  UsIcon, 
  JapanIcon,
  IndiaIcon,
  SingaporeIcon,
  CanadaIcon,
  EuropeIcon,
  UkIcon,
  AustraliaIcon 
} from 'lucide-react';
import { SelectItem } from '@/components/ui/select';

interface PaymentCardRenderProps {
  paymentMethods: PaymentMethod[];
}

// Function to get the appropriate flag icon for a currency
const getCurrencyFlag = (currency: string) => {
  switch(currency) {
    case 'USD':
      return <UsIcon className="h-4 w-4" />;
    case 'SGD':
      return <SingaporeIcon className="h-4 w-4" />;
    case 'JPY':
      return <JapanIcon className="h-4 w-4" />;
    case 'INR':
      return <IndiaIcon className="h-4 w-4" />;
    case 'CAD':
      return <CanadaIcon className="h-4 w-4" />;
    case 'EUR':
      return <EuropeIcon className="h-4 w-4" />;
    case 'GBP':
      return <UkIcon className="h-4 w-4" />;
    case 'AUD':
      return <AustraliaIcon className="h-4 w-4" />;
    // For currencies without specific flag icons, use the BanknoteIcon
    default:
      return <BanknoteIcon className="h-4 w-4" />;
  }
};

// Function to get card network icon based on issuer (simplified version)
const getCardNetworkIcon = (method: PaymentMethod) => {
  // Check if the card name contains network information
  const name = method.name.toLowerCase();
  if (name.includes('visa')) {
    return (
      <svg className="h-4 w-6" viewBox="0 0 36 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect width="36" height="24" rx="4" fill="#F9F9F9"/>
        <path d="M15.0829 15.9H12.8326L14.3078 8.1H16.5581L15.0829 15.9Z" fill="#00579F"/>
        <path d="M22.0369 8.325C21.5694 8.126 20.8249 7.9 19.9 7.9C17.8288 7.9 16.3536 9.054 16.3424 10.7C16.3312 11.9 17.4205 12.571 18.2427 12.982C19.0871 13.404 19.3538 13.678 19.3538 14.055C19.3425 14.636 18.65 14.9 18.0014 14.9C17.0431 14.9 16.5309 14.747 15.7536 14.358L15.4194 14.2L15.0627 16.103C15.6209 16.381 16.6688 16.625 17.7582 16.636C19.9673 16.636 21.4089 15.504 21.4313 13.744C21.442 12.773 20.8024 12.02 19.5235 11.393C18.8075 11.003 18.3736 10.753 18.3736 10.365C18.385 10.021 18.7521 9.676 19.5683 9.676C20.2171 9.665 20.6845 9.86 21.0405 10.044L21.2734 10.156L21.6182 8.347L22.0369 8.325Z" fill="#00579F"/>
        <path d="M25.274 8.1H23.5473C23.0685 8.1 22.7126 8.25 22.5133 8.831L19.7891 15.9H21.9982C21.9982 15.9 22.3206 14.984 22.3996 14.772C22.6102 14.772 24.5577 14.772 24.8244 14.772C24.8809 15.052 25.0576 15.9 25.0576 15.9H27L25.274 8.1ZM23.1122 13.067C23.3004 12.571 23.851 11.143 23.851 11.143C23.8398 11.165 23.9978 10.721 24.0881 10.449L24.222 11.077C24.222 11.077 24.5444 12.647 24.638 13.067H23.1122Z" fill="#00579F"/>
        <path d="M11.3798 8.1L9.30396 13.404L9.09584 12.414C8.72797 11.121 7.51539 9.718 6.16992 9.022L8.06308 15.889H10.2836L13.6114 8.1H11.3798Z" fill="#00579F"/>
        <path d="M8.10767 8.9C7.89955 8.9 7.5091 8.95 7.15877 9.119C7.15877 9.119 5.56865 9.699 6.81934 13.297L5.95491 9C5.95491 9 8.10767 8.9 8.10767 8.9Z" fill="#FAA61A"/>
      </svg>
    );
  } else if (name.includes('mastercard')) {
    return (
      <svg className="h-4 w-6" viewBox="0 0 36 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect width="36" height="24" rx="4" fill="#F9F9F9"/>
        <path d="M22.2773 16.4324V15.8932C22.2773 15.5946 22.0369 15.3514 21.7045 15.3514C21.54 15.3514 21.3661 15.428 21.2586 15.5736C21.1746 15.4471 21.0364 15.3514 20.8447 15.3514C20.7093 15.3514 20.576 15.4089 20.4793 15.527V15.3716H20.2144V16.4324H20.4793V15.8345C20.4793 15.6513 20.5972 15.5547 20.756 15.5547C20.9148 15.5547 21.0143 15.6606 21.0143 15.8345V16.4324H21.2793V15.8345C21.2793 15.6513 21.4045 15.5547 21.5559 15.5547C21.7147 15.5547 21.8143 15.6606 21.8143 15.8345V16.4324H22.2773ZM26.3943 15.3716H26.0026V15.0351H25.7377V15.3716H25.5359V15.593H25.7377V16.0864C25.7377 16.3188 25.8337 16.4493 26.1098 16.4493C26.2201 16.4493 26.3407 16.4169 26.4264 16.3675L26.361 16.1506C26.2879 16.1946 26.2039 16.2108 26.1388 16.2108C26.037 16.2108 26.0026 16.1506 26.0026 16.0729V15.593H26.3943V15.3716ZM28.4133 15.3513C28.2618 15.3513 28.1615 15.4279 28.1026 15.527V15.3716H27.8377V16.4324H28.1026V15.8256C28.1026 15.647 28.1986 15.5458 28.336 15.5458C28.3823 15.5458 28.4323 15.5534 28.4749 15.5681L28.5404 15.3513C28.4926 15.3513 28.4426 15.3513 28.4133 15.3513ZM23.7401 15.4605C23.6109 15.3905 23.4378 15.3513 23.254 15.3513C22.9507 15.3513 22.756 15.5081 22.756 15.7588C22.756 15.9588 22.8991 16.0891 23.1581 16.1432L23.2818 16.1676C23.4168 16.1946 23.4855 16.2323 23.4855 16.2925C23.4855 16.3729 23.3892 16.4277 23.2228 16.4277C23.0619 16.4277 22.9219 16.3756 22.8245 16.3054L22.6876 16.5034C22.8245 16.6071 23.004 16.65 23.1734 16.65C23.513 16.65 23.7559 16.4871 23.7559 16.2716C23.7559 16.0553 23.6071 15.9311 23.3535 15.877L23.2298 15.8526C23.1183 15.8301 23.0337 15.8063 23.0337 15.7353C23.0337 15.6549 23.1201 15.6071 23.2515 15.6071C23.3892 15.6071 23.5279 15.6636 23.6014 15.7068L23.7401 15.4605ZM26.9558 15.3513C26.8042 15.3513 26.704 15.4279 26.645 15.527V15.3716H26.3801V16.4324H26.645V15.8256C26.645 15.647 26.7411 15.5458 26.8784 15.5458C26.9247 15.5458 26.9747 15.5534 27.0174 15.5681L27.0829 15.3513C27.035 15.3513 26.985 15.3513 26.9558 15.3513ZM24.4884 15.3716H24.1234V15.0589H23.8584V15.3716H23.6567V15.593H23.8584V16.0864C23.8584 16.3188 23.9545 16.4493 24.2306 16.4493C24.3409 16.4493 24.4614 16.4169 24.5472 16.3675L24.4817 16.1506C24.4086 16.1946 24.3246 16.2108 24.2595 16.2108C24.1577 16.2108 24.1234 16.1506 24.1234 16.0729V15.593H24.4884V15.3716ZM25.4631 15.3513C25.184 15.3513 24.9839 15.5547 24.9839 15.902C24.9839 16.2493 25.1876 16.4528 25.4739 16.4528C25.6234 16.4528 25.7503 16.409 25.8551 16.3109L25.7359 16.127C25.6622 16.1946 25.5722 16.2332 25.474 16.2332C25.3107 16.2332 25.255 16.1209 25.2489 15.9662H25.8884C25.8884 15.9433 25.8902 15.9204 25.8902 15.8975C25.8938 15.5547 25.7232 15.3513 25.4631 15.3513ZM25.4559 15.5652C25.6077 15.5652 25.6531 15.6745 25.657 15.7811H25.2453C25.2528 15.6763 25.3035 15.5652 25.4559 15.5652ZM28.963 15.902C28.963 15.5547 29.1668 15.3513 29.4531 15.3513C29.6026 15.3513 29.7295 15.3952 29.8342 15.4932L29.7151 15.6771C29.6413 15.6095 29.5513 15.571 29.4531 15.571C29.2897 15.571 29.2281 15.6988 29.2281 15.902C29.2281 16.1052 29.2897 16.233 29.4531 16.233C29.5513 16.233 29.6413 16.1946 29.7151 16.127L29.8342 16.3109C29.7295 16.409 29.6026 16.4528 29.4531 16.4528C29.1668 16.4528 28.963 16.2493 28.963 15.902ZM27.5032 15.902C27.5032 16.2493 27.7071 16.4528 27.9934 16.4528C28.1428 16.4528 28.2697 16.409 28.3745 16.3109L28.2553 16.127C28.1816 16.1946 28.0916 16.2332 27.9934 16.2332C27.83 16.2332 27.7683 16.1052 27.7683 15.902C27.7683 15.6988 27.83 15.571 27.9934 15.571C28.0916 15.571 28.1816 15.6095 28.2553 15.6771L28.3745 15.4932C28.2697 15.3952 28.1428 15.3513 27.9934 15.3513C27.7071 15.3513 27.5032 15.5547 27.5032 15.902ZM22.5046 16.4324V15.6231C22.5046 15.4584 22.4086 15.3514 22.2363 15.3514C22.1044 15.3514 21.9997 15.4089 21.923 15.527C21.8656 15.4199 21.7733 15.3514 21.6303 15.3514C21.5132 15.3514 21.4086 15.3972 21.3347 15.5061V15.3716H21.0698V16.4324H21.3347V15.8405C21.3347 15.663 21.4307 15.5547 21.5732 15.5547C21.7103 15.5547 21.7896 15.6654 21.7896 15.8345V16.4324H22.0545V15.8405C22.0545 15.663 22.1486 15.5547 22.2948 15.5547C22.4355 15.5547 22.5046 15.6654 22.5046 15.8345V16.4324H22.5046ZM26.8269 16.4324V15.3716H26.562V16.4324H26.8269ZM26.694 15.2007C26.789 15.2007 26.8663 15.134 26.8663 15.0374C26.8663 14.9427 26.789 14.8759 26.694 14.8759C26.6008 14.8759 26.5217 14.9427 26.5217 15.0374C26.5217 15.134 26.6008 15.2007 26.694 15.2007ZM24.8654 16.4324V15.6231C24.8654 15.4584 24.7694 15.3514 24.5971 15.3514C24.4652 15.3514 24.3524 15.4089 24.2757 15.527C24.2183 15.4199 24.1259 15.3514 23.9829 15.3514C23.8659 15.3514 23.7612 15.3972 23.6874 15.5061V15.3716H23.4225V16.4324H23.6874V15.8405C23.6874 15.663 23.7833 15.5547 23.9259 15.5547C24.063 15.5547 24.1423 15.6654 24.1423 15.8345V16.4324H24.4072V15.8405C24.4072 15.663 24.5013 15.5547 24.6475 15.5547C24.7882 15.5547 24.8654 15.6654 24.8654 15.8345V16.4324Z" fill="#231F20"/>
        <path d="M18.4766 7.98486H17.5234V16.0108H18.4766V7.98486Z" fill="#FF5F00"/>
        <path d="M17.7402 12C17.7402 10.3091 18.5663 8.81367 19.8741 7.98486C19.1303 7.37485 18.1805 7 17.1339 7C14.2989 7 11.9999 9.23731 11.9999 12C11.9999 14.7627 14.2989 17 17.1339 17C18.1805 17 19.1303 16.6251 19.8741 16.0151C18.5663 15.1863 17.7402 13.6909 17.7402 12Z" fill="#EB001B"/>
        <path d="M24 12C24 14.7627 21.7011 17 18.8661 17C17.8195 17 16.8696 16.6251 16.126 16.0151C17.4338 15.1863 18.26 13.6909 18.26 12C18.26 10.3091 17.4338 8.81367 16.126 7.98486C16.8696 7.37485 17.8195 7 18.8661 7C21.7011 7 24 9.23731 24 12Z" fill="#F79E1B"/>
      </svg>
    );
  } else if (name.includes('american express') || method.issuer === 'American Express') {
    return (
      <svg className="h-4 w-6" viewBox="0 0 36 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect width="36" height="24" rx="4" fill="#F9F9F9"/>
        <path d="M33 16H15.5V8H33C33.5523 8 34 8.44772 34 9V15C34 15.5523 33.5523 16 33 16Z" fill="#006FCF"/>
        <path d="M18.3006 14.5838H20.6332V13.2117H18.3006V12.3229H20.7079V10.9508H18.3006V10.0847H20.6332V8.68526H17.0493C16.8401 8.68526 16.6399 8.77096 16.4927 8.92297C16.3456 9.07498 16.2637 9.28212 16.2637 9.49864V15.0704C16.2637 15.2869 16.3456 15.494 16.4927 15.6461C16.6399 15.7981 16.8401 15.8838 17.0493 15.8838H20.7079V14.5117H18.3006V14.5838ZM25.8831 8.66797H23.9977C23.7754 8.66797 23.5665 8.76096 23.418 8.91926L21.6818 11.0114L19.9456 8.91926C19.7971 8.76096 19.5882 8.66797 19.3659 8.66797H17.4805L20.3328 12.2681L17.334 15.8838H19.2662C19.4871 15.8838 19.6959 15.7909 19.8444 15.6326L21.6819 13.4366L23.5194 15.6326C23.6679 15.7909 23.8767 15.8838 24.0976 15.8838H26.0298L23.031 12.2681L25.8831 8.66797ZM31.3547 12.4652C31.3547 11.6937 31.0559 11.019 30.4582 10.5325C29.8605 10.046 29.1135 9.81778 28.2173 9.81778C27.3211 9.81778 26.5741 10.046 25.9764 10.5325C25.3787 11.019 25.0798 11.6937 25.0798 12.4652C25.0798 13.2368 25.3787 13.9114 25.9764 14.3979C26.5741 14.8844 27.3211 15.1127 28.2173 15.1127C29.1135 15.1127 29.8605 14.8844 30.4582 14.3979C31.0559 13.9114 31.3547 13.2368 31.3547 12.4652ZM29.7105 13.3713C29.5304 13.5321 29.2978 13.6124 29.0129 13.6124C28.728 13.6124 28.4954 13.5321 28.3153 13.3713C28.1352 13.2106 28.0451 12.8893 28.0451 12.4481C28.0451 12.0069 28.1352 11.7198 28.3153 11.5591C28.4954 11.3983 28.728 11.318 29.0129 11.318C29.2978 11.318 29.5304 11.3983 29.7105 11.5591C29.8906 11.7198 29.9807 12.0069 29.9807 12.4481C29.9807 12.8893 29.8906 13.2106 29.7105 13.3713Z" fill="white"/>
        <rect x="2" y="8" width="18" height="8" rx="1" fill="#006FCF"/>
        <path d="M4.27344 10.0846H6.60593V8.68524H2.9791C2.76989 8.68524 2.56968 8.77094 2.42254 8.92296C2.27541 9.07497 2.19348 9.2821 2.19348 9.49862V15.0703C2.19348 15.2869 2.27541 15.494 2.42254 15.646C2.56968 15.798 2.76989 15.8837 2.9791 15.8837H6.63774V14.5116H4.27344V13.2116H6.67748V11.9508H4.27344V10.0846ZM11.5354 10.0846H13.8679V8.68524H10.2411C10.0319 8.68524 9.83169 8.77094 9.68456 8.92296C9.53742 9.07497 9.4555 9.2821 9.4555 9.49862V15.0703C9.4555 15.2869 9.53742 15.494 9.68456 15.646C9.83169 15.798 10.0319 15.8837 10.2411 15.8837H13.8997V14.5116H11.5354V13.2116H13.9426V11.9508H11.5354V10.0846ZM7.86792 8.68524H9.15349V15.8837H7.86792V8.68524ZM14.8193 12.4651C14.8193 11.6936 15.1181 11.0189 15.7158 10.5324C16.3135 10.0459 17.0605 9.81776 17.9567 9.81776H14.8193V12.4651Z" fill="white"/>
      </svg>
    );
  } else {
    // Default credit card icon for other issuers
    return <CreditCardIcon className="h-4 w-4" style={{ color: method.color }} />;
  }
};

const PaymentCardRender: React.FC<PaymentCardRenderProps> = ({ paymentMethods }) => {
  return (
    <>
      {paymentMethods.map((method) => (
        <SelectItem key={method.id} value={method.id}>
          <div className="flex items-center gap-2">
            {method.type === 'cash' ? (
              getCurrencyFlag(method.currency)
            ) : (
              getCardNetworkIcon(method)
            )}
            <span>
              {method.type === 'credit_card' && method.issuer ? 
                `${method.issuer} ${method.name}` : method.name}
            </span>
            {method.type === 'credit_card' && method.lastFourDigits && (
              <span className="text-gray-500 text-xs">...{method.lastFourDigits}</span>
            )}
          </div>
        </SelectItem>
      ))}
    </>
  );
};

export default PaymentCardRender;
